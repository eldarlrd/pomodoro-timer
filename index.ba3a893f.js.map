{"mappings":"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","sources":["<anon>","src/main.ts"],"sourcesContent":["var $b2d58cf6ebdb26f8$exports = {};\n/**\n * @license AGPL-3.0-only\n * Pomodoro Timer - A Pomodoro Timer (25 + 5 Clock)\n * Copyright (C) 2023-2024 Eldar Pashazade <eldarlrd@pm.me>\n *\n * This file is part of Pomodoro Timer.\n *\n * Pomodoro Timer is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, version 3.\n *\n * Pomodoro Timer is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Pomodoro Timer. If not, see <https://www.gnu.org/licenses/>.\n */ const $b2d58cf6ebdb26f8$var$initialState = {\n    breakLength: \"5\",\n    sessionLength: \"25\",\n    timeLeft: \"25:00\"\n};\nconst $b2d58cf6ebdb26f8$var$elements = {\n    playPause: document.getElementById(\"play-pause\"),\n    startStop: document.getElementById(\"start-stop\"),\n    reset: document.getElementById(\"reset\"),\n    alarm: document.getElementById(\"alarm\"),\n    timeLeft: document.getElementById(\"time-left\"),\n    timeLabel: document.getElementById(\"time-label\"),\n    breakDecrement: document.getElementById(\"break-decrement\"),\n    breakIncrement: document.getElementById(\"break-increment\"),\n    breakLength: document.getElementById(\"break-length\"),\n    sessionDecrement: document.getElementById(\"session-decrement\"),\n    sessionIncrement: document.getElementById(\"session-increment\"),\n    sessionLength: document.getElementById(\"session-length\")\n};\nlet $b2d58cf6ebdb26f8$var$ticking = false;\nlet $b2d58cf6ebdb26f8$var$mode = false;\nlet $b2d58cf6ebdb26f8$var$timer;\nconst $b2d58cf6ebdb26f8$var$setTimeToStorage = (key, value)=>{\n    localStorage.setItem(key, value);\n};\nconst $b2d58cf6ebdb26f8$var$getTimeFromStorage = (key, defaultValue)=>localStorage.getItem(key) ?? defaultValue;\nconst $b2d58cf6ebdb26f8$var$changeTime = (elem, delta, max)=>{\n    const newTime = Math.min(Math.max(+elem.innerText + delta, 1), max);\n    elem.innerText = newTime.toString();\n};\nconst $b2d58cf6ebdb26f8$var$updateTimer = (minutes, seconds = 0)=>{\n    const formattedTime = `${minutes < 10 ? \"0\" : \"\"}${minutes.toString()}:${seconds < 10 ? \"0\" : \"\"}${seconds.toString()}`;\n    $b2d58cf6ebdb26f8$var$elements.timeLeft.innerText = formattedTime;\n    $b2d58cf6ebdb26f8$var$setTimeToStorage(\"timeLeft\", formattedTime);\n};\nconst $b2d58cf6ebdb26f8$var$countdown = ()=>{\n    const timeArr = $b2d58cf6ebdb26f8$var$elements.timeLeft.innerText.split(\":\");\n    let prevSeconds = +timeArr[0] * 60 + +timeArr[1];\n    clearInterval($b2d58cf6ebdb26f8$var$timer); // Remove duplicate intervals\n    $b2d58cf6ebdb26f8$var$timer = setInterval(()=>{\n        if (prevSeconds > 0 && $b2d58cf6ebdb26f8$var$ticking) {\n            prevSeconds--;\n            const minutes = ~~(prevSeconds / 60);\n            const seconds = prevSeconds % 60;\n            $b2d58cf6ebdb26f8$var$updateTimer(minutes, seconds);\n        } else {\n            clearInterval($b2d58cf6ebdb26f8$var$timer);\n            if (prevSeconds === 0) {\n                $b2d58cf6ebdb26f8$var$switchMode();\n                $b2d58cf6ebdb26f8$var$countdown();\n            }\n        }\n    }, 1000);\n};\nconst $b2d58cf6ebdb26f8$var$switchMode = ()=>{\n    $b2d58cf6ebdb26f8$var$mode = !$b2d58cf6ebdb26f8$var$mode;\n    $b2d58cf6ebdb26f8$var$elements.alarm.play();\n    $b2d58cf6ebdb26f8$var$setTimeToStorage(\"mode\", JSON.stringify($b2d58cf6ebdb26f8$var$mode));\n    const label = $b2d58cf6ebdb26f8$var$mode ? \"Break\" : \"Session\";\n    const time = $b2d58cf6ebdb26f8$var$mode ? $b2d58cf6ebdb26f8$var$elements.breakLength : $b2d58cf6ebdb26f8$var$elements.sessionLength;\n    $b2d58cf6ebdb26f8$var$elements.timeLabel.innerText = label;\n    $b2d58cf6ebdb26f8$var$updateTimer(+time.innerText);\n};\nconst $b2d58cf6ebdb26f8$var$toggleTicking = ()=>{\n    $b2d58cf6ebdb26f8$var$ticking = !$b2d58cf6ebdb26f8$var$ticking;\n    [\n        $b2d58cf6ebdb26f8$var$elements.breakDecrement,\n        $b2d58cf6ebdb26f8$var$elements.breakIncrement,\n        $b2d58cf6ebdb26f8$var$elements.sessionDecrement,\n        $b2d58cf6ebdb26f8$var$elements.sessionIncrement\n    ].forEach((button)=>button.disabled = $b2d58cf6ebdb26f8$var$ticking);\n    if ($b2d58cf6ebdb26f8$var$elements.playPause) {\n        $b2d58cf6ebdb26f8$var$elements.playPause.classList.toggle(\"fa-play\", !$b2d58cf6ebdb26f8$var$ticking);\n        $b2d58cf6ebdb26f8$var$elements.playPause.classList.toggle(\"fa-pause\", $b2d58cf6ebdb26f8$var$ticking);\n        $b2d58cf6ebdb26f8$var$elements.playPause.title = $b2d58cf6ebdb26f8$var$ticking ? \"Stop Timer\" : \"Start Timer\";\n    }\n};\nconst $b2d58cf6ebdb26f8$var$resetTime = ()=>{\n    clearInterval($b2d58cf6ebdb26f8$var$timer);\n    [\n        \"timeLeft\",\n        \"breakLength\",\n        \"sessionLength\",\n        \"mode\"\n    ].forEach((key)=>{\n        localStorage.removeItem(key);\n    });\n    $b2d58cf6ebdb26f8$var$ticking = false;\n    $b2d58cf6ebdb26f8$var$mode = false;\n    $b2d58cf6ebdb26f8$var$elements.breakLength.innerText = $b2d58cf6ebdb26f8$var$initialState.breakLength;\n    $b2d58cf6ebdb26f8$var$elements.sessionLength.innerText = $b2d58cf6ebdb26f8$var$initialState.sessionLength;\n    $b2d58cf6ebdb26f8$var$elements.timeLeft.innerText = $b2d58cf6ebdb26f8$var$initialState.timeLeft;\n    $b2d58cf6ebdb26f8$var$elements.timeLabel.innerText = \"Session\";\n    if ($b2d58cf6ebdb26f8$var$elements.playPause) {\n        $b2d58cf6ebdb26f8$var$elements.playPause.classList.remove(\"fa-pause\");\n        $b2d58cf6ebdb26f8$var$elements.playPause.classList.add(\"fa-play\");\n        $b2d58cf6ebdb26f8$var$elements.playPause.title = \"Start Timer\";\n    }\n    $b2d58cf6ebdb26f8$var$elements.alarm.pause();\n    $b2d58cf6ebdb26f8$var$elements.alarm.currentTime = 0;\n};\nconst $b2d58cf6ebdb26f8$var$loadStorage = ()=>{\n    $b2d58cf6ebdb26f8$var$elements.breakLength.innerText = $b2d58cf6ebdb26f8$var$getTimeFromStorage(\"breakLength\", $b2d58cf6ebdb26f8$var$initialState.breakLength);\n    $b2d58cf6ebdb26f8$var$elements.sessionLength.innerText = $b2d58cf6ebdb26f8$var$getTimeFromStorage(\"sessionLength\", $b2d58cf6ebdb26f8$var$initialState.sessionLength);\n    $b2d58cf6ebdb26f8$var$elements.timeLeft.innerText = $b2d58cf6ebdb26f8$var$getTimeFromStorage(\"timeLeft\", $b2d58cf6ebdb26f8$var$initialState.timeLeft);\n    $b2d58cf6ebdb26f8$var$mode = JSON.parse($b2d58cf6ebdb26f8$var$getTimeFromStorage(\"mode\", \"false\"));\n    $b2d58cf6ebdb26f8$var$elements.timeLabel.innerText = $b2d58cf6ebdb26f8$var$mode ? \"Break\" : \"Session\";\n};\nconst $b2d58cf6ebdb26f8$var$setupListeners = ()=>{\n    $b2d58cf6ebdb26f8$var$elements.breakDecrement.addEventListener(\"click\", ()=>{\n        $b2d58cf6ebdb26f8$var$changeTime($b2d58cf6ebdb26f8$var$elements.breakLength, -1, 60);\n        $b2d58cf6ebdb26f8$var$setTimeToStorage(\"breakLength\", $b2d58cf6ebdb26f8$var$elements.breakLength.innerText);\n        if ($b2d58cf6ebdb26f8$var$mode) $b2d58cf6ebdb26f8$var$updateTimer(+$b2d58cf6ebdb26f8$var$elements.breakLength.innerText);\n    });\n    $b2d58cf6ebdb26f8$var$elements.breakIncrement.addEventListener(\"click\", ()=>{\n        $b2d58cf6ebdb26f8$var$changeTime($b2d58cf6ebdb26f8$var$elements.breakLength, 1, 60);\n        $b2d58cf6ebdb26f8$var$setTimeToStorage(\"breakLength\", $b2d58cf6ebdb26f8$var$elements.breakLength.innerText);\n        if ($b2d58cf6ebdb26f8$var$mode) $b2d58cf6ebdb26f8$var$updateTimer(+$b2d58cf6ebdb26f8$var$elements.breakLength.innerText);\n    });\n    $b2d58cf6ebdb26f8$var$elements.sessionDecrement.addEventListener(\"click\", ()=>{\n        $b2d58cf6ebdb26f8$var$changeTime($b2d58cf6ebdb26f8$var$elements.sessionLength, -1, 60);\n        $b2d58cf6ebdb26f8$var$setTimeToStorage(\"sessionLength\", $b2d58cf6ebdb26f8$var$elements.sessionLength.innerText);\n        if (!$b2d58cf6ebdb26f8$var$mode) $b2d58cf6ebdb26f8$var$updateTimer(+$b2d58cf6ebdb26f8$var$elements.sessionLength.innerText);\n    });\n    $b2d58cf6ebdb26f8$var$elements.sessionIncrement.addEventListener(\"click\", ()=>{\n        $b2d58cf6ebdb26f8$var$changeTime($b2d58cf6ebdb26f8$var$elements.sessionLength, 1, 60);\n        $b2d58cf6ebdb26f8$var$setTimeToStorage(\"sessionLength\", $b2d58cf6ebdb26f8$var$elements.sessionLength.innerText);\n        if (!$b2d58cf6ebdb26f8$var$mode) $b2d58cf6ebdb26f8$var$updateTimer(+$b2d58cf6ebdb26f8$var$elements.sessionLength.innerText);\n    });\n    $b2d58cf6ebdb26f8$var$elements.startStop.addEventListener(\"click\", ()=>{\n        $b2d58cf6ebdb26f8$var$countdown();\n        $b2d58cf6ebdb26f8$var$toggleTicking();\n    });\n    $b2d58cf6ebdb26f8$var$elements.reset.addEventListener(\"click\", $b2d58cf6ebdb26f8$var$resetTime);\n};\nconst $b2d58cf6ebdb26f8$var$main = ()=>{\n    $b2d58cf6ebdb26f8$var$loadStorage();\n    $b2d58cf6ebdb26f8$var$setupListeners();\n};\n$b2d58cf6ebdb26f8$var$main();\n\n\n//# sourceMappingURL=index.ba3a893f.js.map\n","/**\n * @license AGPL-3.0-only\n * Pomodoro Timer - A Pomodoro Timer (25 + 5 Clock)\n * Copyright (C) 2023-2024 Eldar Pashazade <eldarlrd@pm.me>\n *\n * This file is part of Pomodoro Timer.\n *\n * Pomodoro Timer is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, version 3.\n *\n * Pomodoro Timer is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Pomodoro Timer. If not, see <https://www.gnu.org/licenses/>.\n */\n\nconst initialState = {\n  breakLength: '5',\n  sessionLength: '25',\n  timeLeft: '25:00'\n};\n\nconst elements = {\n  playPause: document.getElementById('play-pause'),\n  startStop: document.getElementById('start-stop') as HTMLButtonElement,\n  reset: document.getElementById('reset') as HTMLButtonElement,\n  alarm: document.getElementById('alarm') as HTMLAudioElement,\n\n  timeLeft: document.getElementById('time-left') as HTMLTimeElement,\n  timeLabel: document.getElementById('time-label') as HTMLHeadingElement,\n\n  breakDecrement: document.getElementById(\n    'break-decrement'\n  ) as HTMLButtonElement,\n  breakIncrement: document.getElementById(\n    'break-increment'\n  ) as HTMLButtonElement,\n  breakLength: document.getElementById('break-length') as HTMLParagraphElement,\n\n  sessionDecrement: document.getElementById(\n    'session-decrement'\n  ) as HTMLButtonElement,\n  sessionIncrement: document.getElementById(\n    'session-increment'\n  ) as HTMLButtonElement,\n  sessionLength: document.getElementById(\n    'session-length'\n  ) as HTMLParagraphElement\n};\n\nlet ticking = false;\nlet mode = false;\nlet timer: number;\n\nconst setTimeToStorage = (key: string, value: string): void => {\n  localStorage.setItem(key, value);\n};\n\nconst getTimeFromStorage = (key: string, defaultValue: string): string =>\n  localStorage.getItem(key) ?? defaultValue;\n\nconst changeTime = (elem: HTMLElement, delta: number, max: number): void => {\n  const newTime = Math.min(Math.max(+elem.innerText + delta, 1), max);\n  elem.innerText = newTime.toString();\n};\n\nconst updateTimer = (minutes: number, seconds = 0): void => {\n  const formattedTime = `${minutes < 10 ? '0' : ''}${minutes.toString()}:${seconds < 10 ? '0' : ''}${seconds.toString()}`;\n  elements.timeLeft.innerText = formattedTime;\n  setTimeToStorage('timeLeft', formattedTime);\n};\n\nconst countdown = (): void => {\n  const timeArr = elements.timeLeft.innerText.split(':');\n  let prevSeconds = +timeArr[0] * 60 + +timeArr[1];\n\n  clearInterval(timer); // Remove duplicate intervals\n\n  timer = setInterval(() => {\n    if (prevSeconds > 0 && ticking) {\n      prevSeconds--;\n      const minutes = ~~(prevSeconds / 60);\n      const seconds = prevSeconds % 60;\n      updateTimer(minutes, seconds);\n    } else {\n      clearInterval(timer);\n      if (prevSeconds === 0) {\n        switchMode();\n        countdown();\n      }\n    }\n  }, 1000);\n};\n\nconst switchMode = (): void => {\n  mode = !mode;\n  void elements.alarm.play();\n  setTimeToStorage('mode', JSON.stringify(mode));\n\n  const label = mode ? 'Break' : 'Session';\n  const time = mode ? elements.breakLength : elements.sessionLength;\n\n  elements.timeLabel.innerText = label;\n  updateTimer(+time.innerText);\n};\n\nconst toggleTicking = (): void => {\n  ticking = !ticking;\n  [\n    elements.breakDecrement,\n    elements.breakIncrement,\n    elements.sessionDecrement,\n    elements.sessionIncrement\n  ].forEach(button => (button.disabled = ticking));\n\n  if (elements.playPause) {\n    elements.playPause.classList.toggle('fa-play', !ticking);\n    elements.playPause.classList.toggle('fa-pause', ticking);\n    elements.playPause.title = ticking ? 'Stop Timer' : 'Start Timer';\n  }\n};\n\nconst resetTime = (): void => {\n  clearInterval(timer);\n  ['timeLeft', 'breakLength', 'sessionLength', 'mode'].forEach(key => {\n    localStorage.removeItem(key);\n  });\n\n  ticking = false;\n  mode = false;\n\n  elements.breakLength.innerText = initialState.breakLength;\n  elements.sessionLength.innerText = initialState.sessionLength;\n  elements.timeLeft.innerText = initialState.timeLeft;\n  elements.timeLabel.innerText = 'Session';\n\n  if (elements.playPause) {\n    elements.playPause.classList.remove('fa-pause');\n    elements.playPause.classList.add('fa-play');\n    elements.playPause.title = 'Start Timer';\n  }\n\n  elements.alarm.pause();\n  elements.alarm.currentTime = 0;\n};\n\nconst loadStorage = (): void => {\n  elements.breakLength.innerText = getTimeFromStorage(\n    'breakLength',\n    initialState.breakLength\n  );\n  elements.sessionLength.innerText = getTimeFromStorage(\n    'sessionLength',\n    initialState.sessionLength\n  );\n  elements.timeLeft.innerText = getTimeFromStorage(\n    'timeLeft',\n    initialState.timeLeft\n  );\n  mode = JSON.parse(getTimeFromStorage('mode', 'false')) as boolean;\n  elements.timeLabel.innerText = mode ? 'Break' : 'Session';\n};\n\nconst setupListeners = (): void => {\n  elements.breakDecrement.addEventListener('click', () => {\n    changeTime(elements.breakLength, -1, 60);\n    setTimeToStorage('breakLength', elements.breakLength.innerText);\n    if (mode) updateTimer(+elements.breakLength.innerText);\n  });\n\n  elements.breakIncrement.addEventListener('click', () => {\n    changeTime(elements.breakLength, 1, 60);\n    setTimeToStorage('breakLength', elements.breakLength.innerText);\n    if (mode) updateTimer(+elements.breakLength.innerText);\n  });\n\n  elements.sessionDecrement.addEventListener('click', () => {\n    changeTime(elements.sessionLength, -1, 60);\n    setTimeToStorage('sessionLength', elements.sessionLength.innerText);\n    if (!mode) updateTimer(+elements.sessionLength.innerText);\n  });\n\n  elements.sessionIncrement.addEventListener('click', () => {\n    changeTime(elements.sessionLength, 1, 60);\n    setTimeToStorage('sessionLength', elements.sessionLength.innerText);\n    if (!mode) updateTimer(+elements.sessionLength.innerText);\n  });\n\n  elements.startStop.addEventListener('click', () => {\n    countdown();\n    toggleTicking();\n  });\n\n  elements.reset.addEventListener('click', resetTime);\n};\n\nconst main = (): void => {\n  loadStorage();\n  setupListeners();\n};\n\nmain();\n"],"names":["$b2d58cf6ebdb26f8$var$timer","$b2d58cf6ebdb26f8$var$elements","playPause","document","getElementById","startStop","reset","alarm","timeLeft","timeLabel","breakDecrement","breakIncrement","breakLength","sessionDecrement","sessionIncrement","sessionLength","$b2d58cf6ebdb26f8$var$ticking","$b2d58cf6ebdb26f8$var$mode","$b2d58cf6ebdb26f8$var$setTimeToStorage","key","value","localStorage","setItem","$b2d58cf6ebdb26f8$var$getTimeFromStorage","defaultValue","getItem","$b2d58cf6ebdb26f8$var$changeTime","elem","delta","max","newTime","Math","min","innerText","toString","$b2d58cf6ebdb26f8$var$updateTimer","minutes","seconds","formattedTime","$b2d58cf6ebdb26f8$var$countdown","timeArr","split","prevSeconds","clearInterval","setInterval","$b2d58cf6ebdb26f8$var$switchMode","play","JSON","stringify","label","time","$b2d58cf6ebdb26f8$var$toggleTicking","forEach","button","disabled","classList","toggle","title","parse","addEventListener","removeItem","remove","add","pause","currentTime"],"version":3,"file":"index.ba3a893f.js.map","sourceRoot":"../"}